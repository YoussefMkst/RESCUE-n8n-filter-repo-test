'use strict';

var n8nWorkflow = require('n8n-workflow');

const DomainResourceTypes = [
    "Account",
    "ActivityDefinition",
    "ActorDefinition",
    "AdministrableProductDefinition",
    "AdverseEvent",
    "AllergyIntolerance",
    "Appointment",
    "AppointmentResponse",
    "ArtifactAssessment",
    "AuditEvent",
    "Basic",
    "BiologicallyDerivedProduct",
    "BiologicallyDerivedProductDispense",
    "BodyStructure",
    "CanonicalResource",
    "CapabilityStatement",
    "CarePlan",
    "CareTeam",
    "ChargeItem",
    "ChargeItemDefinition",
    "Citation",
    "Claim",
    "ClaimResponse",
    "ClinicalImpression",
    "ClinicalUseDefinition",
    "CodeSystem",
    "Communication",
    "CommunicationRequest",
    "CompartmentDefinition",
    "Composition",
    "ConceptMap",
    "Condition",
    "ConditionDefinition",
    "Consent",
    "Contract",
    "Coverage",
    "CoverageEligibilityRequest",
    "CoverageEligibilityResponse",
    "DetectedIssue",
    "Device",
    "DeviceAssociation",
    "DeviceDefinition",
    "DeviceDispense",
    "DeviceMetric",
    "DeviceRequest",
    "DeviceUsage",
    "DiagnosticReport",
    "DocumentReference",
    "Encounter",
    "EncounterHistory",
    "Endpoint",
    "EnrollmentRequest",
    "EnrollmentResponse",
    "EpisodeOfCare",
    "EventDefinition",
    "Evidence",
    "EvidenceReport",
    "EvidenceVariable",
    "ExampleScenario",
    "ExplanationOfBenefit",
    "FamilyMemberHistory",
    "Flag",
    "FormularyItem",
    "GenomicStudy",
    "Goal",
    "GraphDefinition",
    "Group",
    "GuidanceResponse",
    "HealthcareService",
    "ImagingSelection",
    "ImagingStudy",
    "Immunization",
    "ImmunizationEvaluation",
    "ImmunizationRecommendation",
    "ImplementationGuide",
    "Ingredient",
    "InsurancePlan",
    "InventoryItem",
    "InventoryReport",
    "Invoice",
    "Library",
    "Linkage",
    "List",
    "Location",
    "ManufacturedItemDefinition",
    "Measure",
    "MeasureReport",
    "Medication",
    "MedicationAdministration",
    "MedicationDispense",
    "MedicationKnowledge",
    "MedicationRequest",
    "MedicationStatement",
    "MedicinalProductDefinition",
    "MessageDefinition",
    "MessageHeader",
    "MetadataResource",
    "MolecularSequence",
    "NamingSystem",
    "NutritionIntake",
    "NutritionOrder",
    "NutritionProduct",
    "Observation",
    "ObservationDefinition",
    "OperationDefinition",
    "OperationOutcome",
    "Organization",
    "OrganizationAffiliation",
    "PackagedProductDefinition",
    "Patient",
    "PaymentNotice",
    "PaymentReconciliation",
    "Permission",
    "Person",
    "PlanDefinition",
    "Practitioner",
    "PractitionerRole",
    "Procedure",
    "Provenance",
    "Questionnaire",
    "QuestionnaireResponse",
    "RegulatedAuthorization",
    "RelatedPerson",
    "RequestOrchestration",
    "Requirements",
    "ResearchStudy",
    "ResearchSubject",
    "RiskAssessment",
    "Schedule",
    "SearchParameter",
    "ServiceRequest",
    "Slot",
    "Specimen",
    "SpecimenDefinition",
    "StructureDefinition",
    "StructureMap",
    "Subscription",
    "SubscriptionStatus",
    "SubscriptionTopic",
    "Substance",
    "SubstanceDefinition",
    "SubstanceNucleicAcid",
    "SubstancePolymer",
    "SubstanceProtein",
    "SubstanceReferenceInformation",
    "SubstanceSourceMaterial",
    "SupplyDelivery",
    "SupplyRequest",
    "Task",
    "TerminologyCapabilities",
    "TestPlan",
    "TestReport",
    "TestScript",
    "Transport",
    "ValueSet",
    "VerificationResult",
    "VisionPrescription",
];

const credentials = [
    {
        name: "httpBasicAuth",
        required: true,
        displayOptions: {
            show: {
                authentication: ["basicAuth"],
            },
        },
    },
    {
        name: "httpCustomAuth",
        required: true,
        displayOptions: {
            show: {
                authentication: ["customAuth"],
            },
        },
    },
    {
        name: "httpDigestAuth",
        required: true,
        displayOptions: {
            show: {
                authentication: ["digestAuth"],
            },
        },
    },
    {
        name: "httpHeaderAuth",
        required: true,
        displayOptions: {
            show: {
                authentication: ["headerAuth"],
            },
        },
    },
    {
        name: "httpQueryAuth",
        required: true,
        displayOptions: {
            show: {
                authentication: ["queryAuth"],
            },
        },
    },
    {
        name: "oAuth1Api",
        required: true,
        displayOptions: {
            show: {
                authentication: ["oAuth1"],
            },
        },
    },
    {
        name: "oAuth2Api",
        required: true,
        displayOptions: {
            show: {
                authentication: ["oAuth2"],
            },
        },
    },
];
const authenticationField = {
    displayName: "Authentication",
    name: "authentication",
    type: "options",
    options: [
        {
            name: "Basic Auth",
            value: "basicAuth",
        },
        {
            name: "Custom Auth",
            value: "customAuth",
        },
        {
            name: "Digest Auth",
            value: "digestAuth",
        },
        {
            name: "Header Auth",
            value: "headerAuth",
        },
        {
            name: "None",
            value: "none",
        },
        {
            name: "OAuth1",
            value: "oAuth1",
        },
        {
            name: "OAuth2",
            value: "oAuth2",
        },
        {
            name: "Query Auth",
            value: "queryAuth",
        },
    ],
    default: "none",
    description: "The way to authenticate",
};
async function getAuthParameters(node) {
    const result = {};
    try {
        result.httpBasicAuth = await node.getCredentials("httpBasicAuth");
    }
    catch {
    }
    try {
        result.httpCustomAuth = await node.getCredentials("httpCustomAuth");
    }
    catch {
    }
    try {
        result.httpDigestAuth = await node.getCredentials("httpDigestAuth");
    }
    catch {
    }
    try {
        result.httpHeaderAuth = await node.getCredentials("httpHeaderAuth");
    }
    catch {
    }
    try {
        result.httpQueryAuth = await node.getCredentials("httpQueryAuth");
    }
    catch {
    }
    try {
        result.oAuth1Api = await node.getCredentials("oAuth1Api");
    }
    catch {
    }
    try {
        result.oAuth2Api = await node.getCredentials("oAuth2Api");
    }
    catch {
    }
    return result;
}
async function requestWithAuth(node, requestOptions, authParameters) {
    var _a;
    if (authParameters.httpBasicAuth !== undefined) {
        requestOptions.auth = {
            user: authParameters.httpBasicAuth.user,
            pass: authParameters.httpBasicAuth.password,
        };
    }
    if (authParameters.httpHeaderAuth !== undefined) {
        requestOptions.headers = {
            ...requestOptions.headers,
            [authParameters.httpHeaderAuth.name]: authParameters.httpHeaderAuth.value,
        };
    }
    if (authParameters.httpQueryAuth !== undefined) {
        if (!requestOptions.qs) {
            requestOptions.qs = {};
        }
        requestOptions.qs[authParameters.httpQueryAuth.name] =
            authParameters.httpQueryAuth.value;
    }
    if (authParameters.httpDigestAuth !== undefined) {
        requestOptions.auth = {
            user: authParameters.httpDigestAuth.user,
            pass: authParameters.httpDigestAuth.password,
            sendImmediately: false,
        };
    }
    if (authParameters.httpCustomAuth !== undefined) {
        const customAuth = n8nWorkflow.jsonParse(authParameters.httpCustomAuth.json || "{}", { errorMessage: "Invalid Custom Auth JSON" });
        if (customAuth.headers) {
            requestOptions.headers = {
                ...requestOptions.headers,
                ...customAuth.headers,
            };
        }
        if (customAuth.body) {
            requestOptions.body = {
                ...requestOptions.body,
                ...customAuth.body,
            };
        }
        if (customAuth.qs) {
            requestOptions.qs = { ...requestOptions.qs, ...customAuth.qs };
        }
    }
    let response;
    if (authParameters.oAuth1Api) {
        response = await node.helpers.requestOAuth1.call(node, "oAuth1Api", requestOptions);
    }
    else if (authParameters.oAuth2Api) {
        response = await node.helpers.requestOAuth2.call(node, "oAuth2Api", requestOptions, {
            tokenType: "Bearer",
        });
    }
    else {
        response = await node.helpers.request(requestOptions);
    }
    if (!response) {
        throw new n8nWorkflow.NodeApiError(node.getNode(), {
            message: "No response returned - It might indicate an authentication issue",
        });
    }
    if (response.resourceType === "OperationOutcome") {
        console.error(response);
        throw new n8nWorkflow.NodeApiError(node.getNode(), response, {
            message: (_a = response.issue) === null || _a === void 0 ? void 0 : _a.map((issue) => `${issue.severity}: [${issue.code}] ${issue.diagnostics}`).join(", "),
        });
    }
    return response;
}

exports.DomainResourceTypes = DomainResourceTypes;
exports.authenticationField = authenticationField;
exports.credentials = credentials;
exports.getAuthParameters = getAuthParameters;
exports.requestWithAuth = requestWithAuth;
//# sourceMappingURL=Functions-C6Ii13Vz.js.map

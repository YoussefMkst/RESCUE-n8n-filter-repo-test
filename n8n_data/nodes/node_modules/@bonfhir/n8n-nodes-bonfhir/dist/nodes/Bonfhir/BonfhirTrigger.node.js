'use strict';

var Functions = require('../../Functions-C6Ii13Vz.js');
require('n8n-workflow');

class BonfhirTrigger {
    constructor() {
        this.description = {
            displayName: "bonFHIR Trigger",
            name: "bonfhirTrigger",
            version: 1,
            icon: "file:Bonfhir.svg",
            group: ["trigger"],
            description: "Starts the workflow when a FHIR Subscription is triggered",
            subtitle: '={{$parameter["resourceType"] + ($parameter["searchCriteria"] ? "?"+$parameter["searchCriteria"] : "")}}',
            defaults: {
                name: "bonFHIR Trigger",
            },
            inputs: [],
            outputs: ["main"],
            credentials: Functions.credentials,
            webhooks: [
                {
                    name: "default",
                    httpMethod: '={{$parameter["mode"] == "webhook" ? "POST" : "PUT"}}',
                    responseMode: "onReceived",
                    path: '={{$parameter["mode"] == "webhook" ? $parameter["pathPrefix"] : "/fhir/:resourceType/:resourceId"}}',
                    isFullPath: true,
                },
            ],
            properties: [
                {
                    displayName: "Event",
                    name: "event",
                    type: "options",
                    options: [
                        {
                            name: "FHIR Subscription",
                            value: "fhirSubscription",
                        },
                    ],
                    required: true,
                    default: "fhirSubscription",
                },
                Functions.authenticationField,
                {
                    displayName: "Base URL",
                    name: "baseUrl",
                    type: "string",
                    description: "The base URL of the FHIR server API",
                    required: true,
                    default: "http://example.com/fhir",
                },
                {
                    displayName: "Mode",
                    name: "mode",
                    type: "options",
                    description: "How the trigger should behave",
                    required: true,
                    options: [
                        {
                            name: "Webhook",
                            description: "Act as a standard Webhook: POST Method, and stable URL",
                            value: "webhook",
                        },
                        {
                            name: "Resthook / FHIR Client",
                            description: "Act as if it was a FHIR Server receiving a FHIR REST API call, with a PUT method. This is how HAPI FHIR servers works.",
                            value: "resthook",
                        },
                    ],
                    default: "webhook",
                },
                {
                    displayName: "Path Prefix",
                    description: "The Webhook path prefix",
                    hint: "Used to differentiate multiple webhooks - you should probably not change it",
                    name: "pathPrefix",
                    type: "string",
                    required: true,
                    default: `${Math.random().toString(36).slice(-8) + Math.random().toString(36).slice(-8) + Math.random().toString(36).slice(-8)}`,
                    displayOptions: {
                        show: {
                            mode: ["webhook"],
                        },
                    },
                },
                {
                    displayName: "Resource Type",
                    name: "resourceType",
                    type: "options",
                    required: true,
                    default: "",
                    options: [
                        ...Functions.DomainResourceTypes.map((resourceType) => ({
                            name: resourceType,
                            value: resourceType,
                        })),
                        { name: "- Custom -", value: "customResourceType" },
                    ],
                },
                {
                    displayName: "Custom Resource Type",
                    name: "customResourceType",
                    type: "string",
                    required: true,
                    default: "",
                    displayOptions: {
                        show: {
                            resourceType: ["customResourceType"],
                        },
                    },
                },
                {
                    displayName: "Search Criteria",
                    name: "searchCriteria",
                    type: "string",
                    default: "",
                    description: 'Additional search criteria to filter the subscription. Do not include the resource type in the search criteria, nor the "?".',
                },
                {
                    displayName: "Reason",
                    name: "reason",
                    type: "string",
                    required: true,
                    default: "",
                    description: "The reason for the subscription. This is a human-readable explanation of why the subscription is defined.",
                },
                {
                    displayName: "Shared Secret",
                    name: "secret",
                    type: "string",
                    typeOptions: {
                        password: true,
                    },
                    default: `${Math.random().toString(36).slice(-8) + Math.random().toString(36).slice(-8) + Math.random().toString(36).slice(-8)}`,
                    description: "The shared secret to secure the webhook. Leave it empty to disable.",
                },
                {
                    displayName: "Payload",
                    name: "payload",
                    type: "string",
                    default: "application/fhir+json",
                    description: "The payload format. Leave it as application/fhir+JSON unless you know what you are doing.",
                },
                {
                    displayName: "Ignore SSL Issues",
                    name: "allowUnauthorizedCerts",
                    type: "boolean",
                    default: false,
                    description: "Whether to connect even if SSL certificate validation is not possible",
                },
            ],
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    var _a;
                    const allowUnauthorizedCerts = this.getNodeParameter("allowUnauthorizedCerts", false);
                    let baseUrl = (_a = this.getNodeParameter("baseUrl")) === null || _a === void 0 ? void 0 : _a.trim();
                    if (baseUrl.endsWith("/")) {
                        baseUrl = baseUrl.slice(0, -1);
                    }
                    const webhookUrl = getWebhookUrl(this);
                    const response = await Functions.requestWithAuth(this, {
                        method: "GET",
                        headers: {
                            "content-type": `application/fhir+json`,
                        },
                        uri: `${baseUrl}/Subscription`,
                        qs: {
                            _count: 1,
                            status: "active",
                            url: webhookUrl,
                        },
                        json: true,
                        simple: false,
                        rejectUnauthorized: !allowUnauthorizedCerts,
                    }, await Functions.getAuthParameters(this));
                    return response.entry && response.entry.length > 0;
                },
                async create() {
                    var _a;
                    const allowUnauthorizedCerts = this.getNodeParameter("allowUnauthorizedCerts", false);
                    let baseUrl = (_a = this.getNodeParameter("baseUrl")) === null || _a === void 0 ? void 0 : _a.trim();
                    if (baseUrl.endsWith("/")) {
                        baseUrl = baseUrl.slice(0, -1);
                    }
                    const webhookUrl = getWebhookUrl(this);
                    const reason = this.getNodeParameter("reason");
                    const payload = this.getNodeParameter("payload");
                    const secret = this.getNodeParameter("secret");
                    let resourceType = this.getNodeParameter("resourceType", "");
                    if (resourceType === "customResourceType") {
                        resourceType = this.getNodeParameter("customResourceType", "");
                    }
                    const searchCriteria = this.getNodeParameter("searchCriteria");
                    await Functions.requestWithAuth(this, {
                        method: "POST",
                        headers: {
                            "content-type": `application/fhir+json`,
                        },
                        uri: `${baseUrl}/Subscription`,
                        json: true,
                        body: {
                            resourceType: "Subscription",
                            status: "active",
                            reason,
                            criteria: `${resourceType}?${searchCriteria || ""}`,
                            channel: {
                                type: "rest-hook",
                                endpoint: webhookUrl,
                                payload,
                                header: secret ? [`X-Subscription-Auth: ${secret}`] : undefined,
                            },
                        },
                        simple: false,
                        rejectUnauthorized: !allowUnauthorizedCerts,
                    }, await Functions.getAuthParameters(this));
                    return true;
                },
                async delete() {
                    var _a, _b, _c;
                    const allowUnauthorizedCerts = this.getNodeParameter("allowUnauthorizedCerts", false);
                    let baseUrl = (_a = this.getNodeParameter("baseUrl")) === null || _a === void 0 ? void 0 : _a.trim();
                    if (baseUrl.endsWith("/")) {
                        baseUrl = baseUrl.slice(0, -1);
                    }
                    const webhookUrl = getWebhookUrl(this);
                    const response = await Functions.requestWithAuth(this, {
                        method: "GET",
                        headers: {
                            "content-type": `application/fhir+json`,
                        },
                        uri: `${baseUrl}/Subscription`,
                        qs: {
                            _count: 1,
                            status: "active",
                            url: webhookUrl,
                        },
                        json: true,
                        simple: false,
                        rejectUnauthorized: !allowUnauthorizedCerts,
                    }, await Functions.getAuthParameters(this));
                    const subscription = (_c = (_b = response.entry) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.resource;
                    if (subscription === null || subscription === void 0 ? void 0 : subscription.id) {
                        await Functions.requestWithAuth(this, {
                            method: "DELETE",
                            headers: {
                                "content-type": `application/fhir+json`,
                            },
                            uri: `${baseUrl}/Subscription/${subscription.id}`,
                            simple: false,
                            rejectUnauthorized: !allowUnauthorizedCerts,
                        }, await Functions.getAuthParameters(this));
                    }
                    return true;
                },
            },
        };
    }
    async webhook() {
        const req = this.getRequestObject();
        const secret = this.getNodeParameter("secret");
        if (secret) {
            const header = req.headers["x-subscription-auth"];
            if (header !== secret) {
                return {};
            }
        }
        const rawResource = Buffer.from(req.rawBody);
        const resource = JSON.parse(rawResource.toString());
        return {
            webhookResponse: JSON.stringify(resource),
            workflowData: [this.helpers.returnJsonArray(resource)],
        };
    }
}
function getWebhookUrl(node) {
    return node
        .getNodeWebhookUrl("default")
        .replace("/:resourceType/:resourceId", "");
}

exports.BonfhirTrigger = BonfhirTrigger;
//# sourceMappingURL=BonfhirTrigger.node.js.map
